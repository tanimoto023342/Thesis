judgeprogの入力プログラムの仕様について
・入力プログラムは仕様書にある文法のみ使っているものとする
  -例えばカット構文や非同期関連の命令の文法は仕様書に載せていないため非対応

  ・本プログラムの仕様書に入れてる文法は主に以下のものである
    -式(Expression)の一部(テスト済み)
    -代入文(テスト済み)
    -関数定義文(テスト済み)
    -if文(テスト済み)
    -for文(テスト済み)
    -while文(テスト済み)
    -pass, break, continue(テスト済み)

・関数の展開畳み込みは下記の条件を満たしてさえいれば, 何か所で行われていても問題ない。
  -展開畳み込みはソースコードの本文中のみでおこなわれているものとする(関数定義の中で展開畳み込みは行われない)

  新たに定義される関数について
    以下、関数全体を本文, 引数, 返り値の要素にわけて述べる

    ・新たに定義される関数の本文は以下の文法事項のみ使えるものとする
      -式(Expression)の一部(テスト済み)
      -代入文(テスト済み)
      -if文(テスト済み)
      -for文(テスト済み)
      -while文(テスト済み)
      -pass, break, continue(テスト済み)

    ・新たに定義される関数の引数の条件は以下の通りである
      -実引数は変数を含まないexpression(式)であること
      ex. 1,2,1+1,True, 3<5(x,x+1,y<zといったものは認めない)
      -仮引数は特殊な文法(デフォルト引数, 可変長引数など)を認めない

    ・新たに定義される関数の引数の返り値の条件は以下の通りである
      -返り値はNAME(変数,関数など),True,False,None,strings,NUMBER,'...'のみとする <-理由はテスト簡略化のため
      ex. 1,2,x,True(x+1,5>3といったものは認めない)
      -返り値に変数を指定する場合は, 置き換え元の変数と変数名が同一でなくてはならない
      ex. print(x)をprint(func())にする場合, funcの返り値はxでなくてはならない. 同じ機能であってもyやzといった変数名は不可
      -新規に定義される関数の中で, return文は関数の定義全体で１か所のみとする


                    atom ::=
                        NAME
                        | 'True' 
                        | 'False' 
                        | 'None' 
                        | strings
                        | NUMBER
                        | '...'

  -下記の仕様を満たしていなければ、仕様書に乗せている文法のみを使ったからといって必ずしも正しい結果を得られるとは限らない