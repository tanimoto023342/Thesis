INFO:root:program started

DEBUG:root:open_file_and_make_ast(filename1:test.py, filename2:testref.py, )


INFO:root:start making AST1 to anytree

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Module object at 0x00000210B51D3FD0>, )


DEBUG:root:ast_to_any_node(ast_node:<ast.Module object at 0x00000210B51D3FD0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Module')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Assign object at 0x00000210B5200310>, parent=None:AnyNode(classname='Module'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Assign object at 0x00000210B5200310>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Assign')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B52002E0>, parent=None:AnyNode(classname='Assign'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B52002E0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='y')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Store object at 0x00000210B4B5F100>, parent=None:AnyNode(classname='Name', id='y'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Store object at 0x00000210B4B5F100>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Store')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Store')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='y')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.BinOp object at 0x00000210B52002B0>, parent=None:AnyNode(classname='Assign'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.BinOp object at 0x00000210B52002B0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='BinOp')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Constant object at 0x00000210B5200280>, parent=None:AnyNode(classname='BinOp'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Constant object at 0x00000210B5200280>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Constant', value=2)

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Constant', value=2)

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Mult object at 0x00000210B4B5EE60>, parent=None:AnyNode(classname='BinOp'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Mult object at 0x00000210B4B5EE60>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Mult')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Mult')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Constant object at 0x00000210B5200250>, parent=None:AnyNode(classname='BinOp'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Constant object at 0x00000210B5200250>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Constant', value=2)

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Constant', value=2)

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='BinOp')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Assign')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Expr object at 0x00000210B5200220>, parent=None:AnyNode(classname='Module'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Expr object at 0x00000210B5200220>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Expr')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Call object at 0x00000210B52001F0>, parent=None:AnyNode(classname='Expr'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Call object at 0x00000210B52001F0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Call')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B52001C0>, parent=None:AnyNode(classname='Call'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B52001C0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='print')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Load object at 0x00000210B4B63BE0>, parent=None:AnyNode(classname='Name', id='print'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Load object at 0x00000210B4B63BE0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='print')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B5200160>, parent=None:AnyNode(classname='Call'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B5200160>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='y')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Load object at 0x00000210B4B63BE0>, parent=None:AnyNode(classname='Name', id='y'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Load object at 0x00000210B4B63BE0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='y')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Call')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Expr')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Module')

INFO:root:start making AST2 to anytree

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Module object at 0x00000210B5200880>, )


DEBUG:root:ast_to_any_node(ast_node:<ast.Module object at 0x00000210B5200880>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Module')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.FunctionDef object at 0x00000210B5200850>, parent=None:AnyNode(classname='Module'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.FunctionDef object at 0x00000210B5200850>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='FunctionDef', name='func')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.arguments object at 0x00000210B5200820>, parent=None:AnyNode(classname='FunctionDef', name='func'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.arguments object at 0x00000210B5200820>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='arguments')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.arg object at 0x00000210B52007F0>, parent=None:AnyNode(classname='arguments'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.arg object at 0x00000210B52007F0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(arg='z', classname='arg')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(arg='z', classname='arg')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='arguments')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Assign object at 0x00000210B52007C0>, parent=None:AnyNode(classname='FunctionDef', name='func'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Assign object at 0x00000210B52007C0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Assign')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B5200790>, parent=None:AnyNode(classname='Assign'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B5200790>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='x')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Store object at 0x00000210B4B5F100>, parent=None:AnyNode(classname='Name', id='x'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Store object at 0x00000210B4B5F100>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Store')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Store')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='x')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.BinOp object at 0x00000210B5200760>, parent=None:AnyNode(classname='Assign'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.BinOp object at 0x00000210B5200760>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='BinOp')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B5200730>, parent=None:AnyNode(classname='BinOp'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B5200730>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='z')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Load object at 0x00000210B4B63BE0>, parent=None:AnyNode(classname='Name', id='z'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Load object at 0x00000210B4B63BE0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='z')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Mult object at 0x00000210B4B5EE60>, parent=None:AnyNode(classname='BinOp'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Mult object at 0x00000210B4B5EE60>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Mult')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Mult')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B5200700>, parent=None:AnyNode(classname='BinOp'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B5200700>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='z')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Load object at 0x00000210B4B63BE0>, parent=None:AnyNode(classname='Name', id='z'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Load object at 0x00000210B4B63BE0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='z')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='BinOp')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Assign')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Return object at 0x00000210B52006D0>, parent=None:AnyNode(classname='FunctionDef', name='func'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Return object at 0x00000210B52006D0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Return')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B52006A0>, parent=None:AnyNode(classname='Return'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B52006A0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='x')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Load object at 0x00000210B4B63BE0>, parent=None:AnyNode(classname='Name', id='x'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Load object at 0x00000210B4B63BE0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='x')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Return')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='FunctionDef', name='func')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Expr object at 0x00000210B5200670>, parent=None:AnyNode(classname='Module'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Expr object at 0x00000210B5200670>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Expr')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Call object at 0x00000210B5200640>, parent=None:AnyNode(classname='Expr'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Call object at 0x00000210B5200640>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Call')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B5200610>, parent=None:AnyNode(classname='Call'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B5200610>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='print')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Load object at 0x00000210B4B63BE0>, parent=None:AnyNode(classname='Name', id='print'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Load object at 0x00000210B4B63BE0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='print')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Call object at 0x00000210B52005E0>, parent=None:AnyNode(classname='Call'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Call object at 0x00000210B52005E0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Call')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Name object at 0x00000210B52005B0>, parent=None:AnyNode(classname='Call'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Name object at 0x00000210B52005B0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Name', id='func')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Load object at 0x00000210B4B63BE0>, parent=None:AnyNode(classname='Name', id='func'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Load object at 0x00000210B4B63BE0>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Load')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Name', id='func')

DEBUG:root:convert_ast_to_anytree(ast_node:<ast.Constant object at 0x00000210B5200550>, parent=None:AnyNode(classname='Call'), )


DEBUG:root:ast_to_any_node(ast_node:<ast.Constant object at 0x00000210B5200550>, )


DEBUG:root:ast_to_anytree_node return 
AnyNode(classname='Constant', value=2)

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Constant', value=2)

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Call')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Call')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Expr')

DEBUG:root:convert_ast_to_anytree return 
AnyNode(classname='Module')

INFO:root:finished making anytree

INFO:root:start comparing tree

DEBUG:root:compare_nodes(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Module'), )


DEBUG:root:compare_nodes(node1:AnyNode(classname='Assign'), node2:AnyNode(classname='FunctionDef', name='func'), )


DEBUG:root:compare_nodes retun False
pair:{'classname': 'Assign', 'name': UnDefined, 'id': UnDefined, 'value': UnDefined, 'func': UnDefined, 'arg': UnDefined, '_NodeMixin__children': [AnyNode(classname='Name', id='y'), AnyNode(classname='BinOp')], '_NodeMixin__parent': AnyNode(classname='Module')}
{'classname': 'FunctionDef', 'name': 'func', 'id': UnDefined, 'value': UnDefined, 'func': UnDefined, 'arg': UnDefined, '_NodeMixin__children': [AnyNode(classname='arguments'), AnyNode(classname='Assign'), AnyNode(classname='Return')], '_NodeMixin__parent': AnyNode(classname='Module')}

DEBUG:root:compare_nodes return False

INFO:root:finished comparing tree

INFO:root:compare_nodes(Module,Module)
=False

INFO:root:start checking Extract

DEBUG:root:check_extract(t1:AnyNode(classname='Module'), t2:AnyNode(classname='Module'), )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Module'), )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='FunctionDef', name='func'), func_info_dict={}:{}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Expr'), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Call'), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Name', id='print'), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Load'), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Call'), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Name', id='func'), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Load'), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_new_func(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Constant', value=2), func_info_dict={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Module'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='FunctionDef', name='func'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='arguments'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(arg='z', classname='arg'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Assign'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Name', id='x'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Store'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='BinOp'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Name', id='z'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Load'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Mult'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Name', id='z'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Load'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Return'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Name', id='x'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Load'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Expr'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Call'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Name', id='print'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Load'), )


DEBUG:root:check_func_call(name_list:dict_keys(['func']), func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, node:AnyNode(classname='Call'), )


INFO:root:func_info_dict=
{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}

DEBUG:root:func_info(AnyNode(classname='FunctionDef', name='func'))
DEBUG:root:multiple_variable_unification(body_copy:[AnyNode(classname='Assign')], variable_name_list:['z'], arg_node_list:[AnyNode(classname='Constant', value=2)], )


DEBUG:root:variable_unification(tree_root:AnyNode(classname='Assign'), variable_name:z, arg_node:AnyNode(classname='Constant', value=2), )


DEBUG:root:variable_unification(tree_root:AnyNode(classname='Name', id='x'), variable_name:z, arg_node:AnyNode(classname='Constant', value=2), )


DEBUG:root:variable_unification(tree_root:AnyNode(classname='Store'), variable_name:z, arg_node:AnyNode(classname='Constant', value=2), )


DEBUG:root:variable_unification(tree_root:AnyNode(classname='BinOp'), variable_name:z, arg_node:AnyNode(classname='Constant', value=2), )


DEBUG:root:variable_unification(tree_root:AnyNode(classname='Name', id='z'), variable_name:z, arg_node:AnyNode(classname='Constant', value=2), )


DEBUG:root:copy_tree(node:AnyNode(classname='Constant', value=2), )


DEBUG:root:insert_child(parentNode:AnyNode(classname='BinOp'), num:0, nodelist=[]:[AnyNode(classname='Constant', value=2)], )


DEBUG:root:copy_tree(node:AnyNode(classname='Constant', value=2), )


DEBUG:root:variable_unification(tree_root:AnyNode(classname='Mult'), variable_name:z, arg_node:AnyNode(classname='Constant', value=2), )


DEBUG:root:variable_unification(tree_root:AnyNode(classname='Name', id='z'), variable_name:z, arg_node:AnyNode(classname='Constant', value=2), )


DEBUG:root:copy_tree(node:AnyNode(classname='Constant', value=2), )


DEBUG:root:insert_child(parentNode:AnyNode(classname='BinOp'), num:2, nodelist=[]:[AnyNode(classname='Constant', value=2)], )


DEBUG:root:copy_tree(node:AnyNode(classname='Constant', value=2), )


DEBUG:root:multiple_variable_unification(body_copy:AnyNode(classname='Name', id='x'), variable_name_list:['z'], arg_node_list:[AnyNode(classname='Constant', value=2)], )


DEBUG:root:check_func_return(return_tree:AnyNode(classname='Name', id='x'), tree_node:AnyNode(classname='Module'), )


INFO:root:finished checking Extract

INFO:root:checkExtract(Module,Module)
={'func': func_info(AnyNode(classname='FunctionDef', name='func'))}

DEBUG:root:modify_extract(func_info_dict:{'func': func_info(AnyNode(classname='FunctionDef', name='func'))}, )


DEBUG:root:insert_child(parentNode:AnyNode(classname='Call'), num:1, nodelist=[]:[AnyNode(classname='Name', id='x')], )


DEBUG:root:copy_tree(node:AnyNode(classname='Name', id='x'), )


DEBUG:root:copy_tree(node:AnyNode(classname='Load'), )


DEBUG:root:insert_child(parentNode:AnyNode(classname='Module'), num:0, nodelist=[]:[AnyNode(classname='Assign')], )


DEBUG:root:copy_tree(node:AnyNode(classname='Assign'), )


DEBUG:root:copy_tree(node:AnyNode(classname='Name', id='x'), )


DEBUG:root:copy_tree(node:AnyNode(classname='Store'), )


DEBUG:root:copy_tree(node:AnyNode(classname='BinOp'), )


DEBUG:root:copy_tree(node:AnyNode(classname='Constant', value=2), )


DEBUG:root:copy_tree(node:AnyNode(classname='Mult'), )


DEBUG:root:copy_tree(node:AnyNode(classname='Constant', value=2), )


DEBUG:root:compare_nodes(node1:AnyNode(classname='Module'), node2:AnyNode(classname='Module'), )


DEBUG:root:compare_nodes(node1:AnyNode(classname='Assign'), node2:AnyNode(classname='Assign'), )


DEBUG:root:compare_nodes(node1:AnyNode(classname='Name', id='y'), node2:AnyNode(classname='Name', id='x'), )


DEBUG:root:compare_nodes retun False
pair:{'classname': 'Name', 'name': UnDefined, 'id': 'y', 'value': UnDefined, 'func': UnDefined, 'arg': UnDefined, '_NodeMixin__children': [AnyNode(classname='Store')], '_NodeMixin__parent': AnyNode(classname='Assign')}
{'classname': 'Name', 'name': UnDefined, 'id': 'x', 'value': UnDefined, 'func': UnDefined, 'arg': UnDefined, '_NodeMixin__children': [AnyNode(classname='Store')], '_NodeMixin__parent': AnyNode(classname='Assign')}

DEBUG:root:compare_nodes return False

DEBUG:root:compare_nodes return False

INFO:root:program finished

