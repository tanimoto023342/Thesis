以下の文法に従うようなfileを生成してください

file ::= [statements] ENDMARKER
statements ::= statement+ 
statement ::= 
    compound_stmt  
    | simple_stmts
compound_stmt ::=
    | function_def
    | if_stmt
    | for_stmt
    | while_stmt
if_stmt ::=
    | 'if' named_expression ':' block elif_stmt 
    | 'if' named_expression ':' block [else_block] 
elif_stmt ::=
    | 'elif' named_expression ':' block elif_stmt 
    | 'elif' named_expression ':' block [else_block] 
else_block ::=
    | 'else' ':' block
block ::=
    | NEWLINE INDENT statements DEDENT 
    | simple_stmts
while_stmt ::=
    | 'while' named_expression ':' block [else_block]
for_stmt ::=
    | 'for' star_targets 'in' ~ star_expressions ':' [TYPE_COMMENT] block [else_block]
function_def: 
    | function_def_raw
function_def_raw:
    | 'def' NAME '(' [params] ')' ':' block !return
params:
    | parameters
parameters: 
    | param_no_default+ param_with_default*  
    | param_with_default+ 
param_no_default:
    | param ',' 
    | param 
param_with_default:
    | param default ',' 
    | param default 
default: '=' expression
param: NAME

simple_stmt ::=
    | assignment_stmt
    | expression 
    | 'pass' 
    | 'break' 
    | 'continue' 
 expression ::= 
    disjunction 'if' disjunction 'else' expression 
    | disjunction
disjunction ::=
    conjunction ('or' conjunction )+ 
    | conjunction
conjunction ::=
    inversion ('and' inversion )+ 
    | inversion
inversion ::=
    'not' inversion 
    | comparison
comparison ::=
    bitwise_or compare_op_bitwise_or_pair+ 
    | bitwise_or
compare_op_bitwise_or_pair ::=
    eq_bitwise_or
    | noteq_bitwise_or
    | lte_bitwise_or
    | lt_bitwise_or
    | gte_bitwise_or
    | gt_bitwise_or
    | notin_bitwise_or
    | in_bitwise_or
    | isnot_bitwise_or
    | is_bitwise_or
eq_bitwise_or ::= '==' bitwise_or 
noteq_bitwise_or::=
    ('!=' ) bitwise_or 
lte_bitwise_or ::= '<=' bitwise_or 
lt_bitwise_or ::= '<' bitwise_or 
gte_bitwise_or ::= '>=' bitwise_or 
gt_bitwise_or ::= '>' bitwise_or 
notin_bitwise_or ::= 'not' 'in' bitwise_or 
in_bitwise_or ::= 'in' bitwise_or 
isnot_bitwise_or ::= 'is' 'not' bitwise_or 
is_bitwise_or ::= 'is' bitwise_or
bitwise_or ::=
        bitwise_or '|' bitwise_xor 
    | bitwise_xor
bitwise_xor ::=
    bitwise_xor '^' bitwise_and 
    | bitwise_and
bitwise_and ::=
    bitwise_and '&' shift_expr 
    | shift_expr
shift_expr ::=
    shift_expr '<<' sum 
    | shift_expr '>>' sum 
    | sum
sum ::=
    sum '+' term 
    | sum '-' term 
    | term
term ::=
    term '*' factor 
    | term '/' factor 
    | term '//' factor 
    | term '%' factor 
    | term '@' factor 
    | factor
factor ::=
    '+' factor 
    | '-' factor 
    | '~' factor 
    | power
power ::=
    await_primary '**' factor 
    | primary
primary ::=
    | primary '.' NAME 
    | primary '(' [arguments] ')' 
    | primary '[' named_expression ']' 
    | atom
named_expression:
    | expression !':='
atom ::=
    NAME
    | 'True' 
    | 'False' 
    | 'None' 
    | strings
    | NUMBER
    | (tuple | group)
    | list
    | (dict | set)
    | '...'
arguments ::= args [','] &')'
args ::= ','.(expression !':=')+
assignment_stmt ::=  
    (star_atom "=")+ (expression)
    | star_atom augassign ~ expression
augassign ::=
    | '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='
star_atom ::= NAME